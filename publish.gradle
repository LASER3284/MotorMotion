apply plugin: 'maven-publish'

ext.licenseFile = files("$rootDir/COPYING.txt")

def pubVersion = '2023.0.1-rc1'

def outputsFolder = file("$buildDir/output")

def versionFile = file("$outputsFolder/version.txt")

task outputVersions() {
    description = 'Prints the versions of wpilib to a file for use by the downstream packaging project'
    group = 'Build'
    outputs.files(versionFile)

    doFirst {
        buildDir.mkdir()
        outputsFolder.mkdir()
    }

    doLast {
        versionFile.write pubVersion
    }
}

task libraryBuild() {}

build.dependsOn outputVersions

task copyAllOutputs(type: Copy) {
    destinationDir file("$buildDir/allOutputs")
    from versionFile
    dependsOn outputVersions
}

build.dependsOn copyAllOutputs
copyAllOutputs.dependsOn outputVersions

ext.addTaskToCopyAllOutputs = { task ->
    copyAllOutputs.dependsOn task
    copyAllOutputs.inputs.file task.archivePath
    copyAllOutputs.from task.archivePath
}

def artifactGroupId = 'com.laser3284.MotorMotion'
def baseArtifactId = 'MotorMotion'
def zipBaseName = "_GROUP_com_laser3284_MotorMotion_ID_${baseArtifactId}-cpp_CLS"
def javaBaseName = "_GROUP_com_laser3284_MotorMotion_ID_${baseArtifactId}-java_CLS"

task cppHeadersZip(type: Zip) {
    destinationDirectory = outputsFolder
    archiveBaseName = zipBaseName
    classifier = "headers"

    from(licenseFile) {
        into '/'
    }

    from('src/main/native/include') {
        into '/'
    }
}

task cppSourceZip(type: Zip) {
    destinationDirectory = outputsFolder
    archiveBaseName = zipBaseName
    classifier = "sources"

    from(licenseFile) {
        into '/'
    }

    from('src/main/native/cpp') {
        into '/'
    }
}


build.dependsOn cppHeadersZip
addTaskToCopyAllOutputs(cppHeadersZip)
build.dependsOn cppSourceZip
addTaskToCopyAllOutputs(cppSourceZip)

def motormotionFileInput = file("src/generate/MotorMotion.json.in")
ext.motormotionFileOutput = file("$buildDir/generated/vendordeps/MotorMotion.json")

task generateVendorJson() {
    description = "Generates the vendor JSON file"
    group = "MotorMotion"

    outputs.file motormotionFileOutput
    inputs.file motormotionFileInput

    doLast {
        println "Writing version ${pubVersion} to $motormotionFileOutput"

        if (motormotionFileOutput.exists()) {
            motormotionFileOutput.delete()
        }
        def read = motormotionFileInput.text.replace('${mm_version}', pubVersion)
        motormotionFileOutput.write(read)
    }

    outputs.upToDateWhen { false }
}

libraryBuild.dependsOn build
libraryBuild.dependsOn generateVendorJson

def releasesRepoUrl = "$buildDir/repos/releases"

publishing {
    repositories {
        maven {
            url = releasesRepoUrl
        }
    }
}

task cleanReleaseRepo(type: Delete) {
    delete releasesRepoUrl
}

tasks.matching {it != cleanReleaseRepo}.all {it.dependsOn cleanReleaseRepo}

model {
    publishing {
        def taskList = createComponentZipTasks($.components, ['MotorMotion'], zipBaseName, Zip, project, includeStandardZipFormat)

        publications {
            cpp(MavenPublication) {
                taskList.each {
                    artifact it
                }
                artifact cppHeadersZip
                artifact cppSourceZip

                artifactId = "${baseArtifactId}-cpp"
                groupId artifactGroupId
                version pubVersion
            }
            /* TODO-JAVA:
            java(MavenPublication) {
                artifact jar
                artifact sourcesJar
                artifact javadocJar

                artifactId = "${baseArtifactId}-java"
                groupId artifactGroupId
                version pubVersion
            }
            */
        }
    }
}
