name: Publish Release

on: 
  push:
    branches:
      # This should always point to the "main" current branch, so that way any push to the main branch publishes a new release
      - 2022
  workflow_dispatch:


# Grant the github workflow permissions to write files to the repo
permissions:
  contents: write

jobs:
  # Build the code for the roboRIO
  build-docker:
    strategy:
      fail-fast: false
      matrix:
        include:
          - container: wpilib/roborio-cross-ubuntu:2023-22.04
            artifact-name: Athena
            build-options: "-Ponlylinuxathena"
          - container: wpilib/raspbian-cross-ubuntu:bullseye-22.04
            artifact-name: Arm32
            build-options: "-Ponlylinuxarm32"
          - container: wpilib/aarch64-cross-ubuntu:bullseye-22.04
            artifact-name: Arm64
            build-options: "-Ponlylinuxarm64"
          - container: wpilib/ubuntu-base:22.04
            artifact-name: Linux
            build-options: ""
    name: "Build - ${{ matrix.artifact-name }}"
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    
    steps:
      - name: Checkout repo
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      - name: Build with Gradle
        run: ./gradlew build --max-workers 1 -PbuildServer ${{ matrix.build-options }}
      
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: build/allOutputs

      - name: Grant execute permissions to example builder
        run: chmod +x ./build-examples.sh
        working-directory: ./examples

      - name: Build examples
        run: ./build-examples.sh
        working-directory: ./examples
  
  # TODO: Implement windows desktop builds
  # TODO: Implement macOS desktop builds

  # Combine all of the outputs to an artifact
  combine:
    name: Combine outputs
    needs: [build-docker]
    runs-on: ubuntu-latest
    
    steps:
      # Download the wpilib build tools
      - uses: actions/checkout@v3
        with:
          repository: wpilibsuite/build-tools
      
      # Download the output artifacts
      - uses: actions/download-artifact@v3
        with:
          path: combiner/products/build/allOutputs
      
      - name: Flatten Artifacts
        run: rsync -a --delete combiner/products/build/allOutputs/*/* combiner/products/build/allOutputs/
      
      - uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: zulu
      
      - name: Combine
        run: ./gradlew publish -Pthirdparty -PreleaseRepoPublish
        working-directory: combiner
      
      - name: Upload maven builds
      - uses: actions/upload-artifact@v3
        with:
          name: maven_builds
          path: ~/releases

  # Build the docs for doxygen
  publish-docs:
    name: Publish doxygen docs
    runs-on: ubuntu-22.04
    
    # This requires that the linux build succeed before generating doxygen docs
    needs: [combine]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: "true"

      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: zulu

      - name: Checkout doxygen-awesome-css
        uses: actions/checkout@v2
        with:
          # Checks out https://github.com/jothepro/doxygen-awesome-css from github
          repository: jothepro/doxygen-awesome-css
          path: doxygen-awesome-css

      - name: Download doxygen
        run: curl -OL https://www.doxygen.nl/files/doxygen-1.9.5.linux.bin.tar.gz

      - name: Extract doxygen
        run: tar -xvf doxygen-1.9.5.linux.bin.tar.gz

      - name: Generate doxygen via doxyfile
        run: ./doxygen-1.9.5/bin/doxygen ./Doxyfile

      # Move the 'docs' subfolder to the docs branch
      - name: Publish docs folder to docs branch
        uses: s0/git-publish-subdir-action@develop
        env:
          # We're pushing the changes to our own repo
          REPO: self
          BRANCH: docs
          FOLDER: docs
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout gh-pages
        uses: actions/checkout@v3
        with:
          submodules: "true"
          ref: gh-pages
          path: gh-pages

      - name: Download maven artifacts
        uses: actions/download-artifact@v3
        with:
          name: maven_builds
          path: ./gh-pages/repos/releases

      - name: Update metadata
        run: java -jar MavenMetaDataFixer.jar
        working-directory: ./gh-pages/repos/releases/

      # Now we're going to properly publish the main github pages page.
      - name: Move vendordep JSON file
        run: sudo mv MotorMotion.json ./docs/
      
      # Move our built binaries to the ./docs/repos
      - name: Move built binaries
        run: sudo cp -a ./gh-pages/repos ./docs/repos

      - name: Move CNAME file
        run: sudo mv CNAME ./docs/

      # Make the .nojekyll file for the gh-pages branch
      - name: Make .nojekyll
        run: touch ./docs/.nojekyll

      # Finally push the extra vendordep/binary changes to the gh-pages branch
      - name: Publish docs folder to gh-pages branch
        uses: s0/git-publish-subdir-action@develop
        env:
          # We're pushing the changes to our own repo
          REPO: self
          BRANCH: gh-pages
          FOLDER: docs
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
